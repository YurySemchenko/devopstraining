<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.31">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <displayName>TASK6</displayName>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.61">
    <script>pipeline {
    agent any 
    stages {
        stage(&apos;Git&apos;) {
            steps {
                node(&apos;master&apos;){
                    sh &apos;&apos;&apos;
                    rm -rf *
                    git clone -b task6 git@github.com:yu74co/devopstraining.git
                    cd devopstraining
                    git add *
                    git config user.email &quot;sem.y@tut.by&quot;
                    git config user.name &quot;Yury Semchanka&quot;
                    git config push.default simple
                    &apos;&apos;&apos;
                }
            }
        }
    
        stage(&apos;Gradle&apos;){
            steps {
                node(&apos;master&apos;){
                    sh &apos;&apos;&apos;chmod -R 755 devopstraining
                        cd devopstraining
                        ./gradlew incrementVersion
                        ./gradlew build
                        export ver=$(cat gradle.properties | grep version= | sed &apos;s/version=//&apos;)
                        curl -XPUT -u admin:admin123 -T build/libs/devopstraining-$ver.war http://server1:8081/nexus/content/repositories/snapshots/task6/$ver/test.war
                        
                    &apos;&apos;&apos;
                    script { 
                    VERs = readFile(&apos;./devopstraining/gradle.properties&apos;)
                    String version=VERs.drop(VERs.lastIndexOf(&apos;=&apos;)+1)
                    echo &quot;${VERs}!&quot;
                    echo &quot;${version}&quot;
                    env.ver = &quot;${version}&quot;
                    }
                }
                
            }
        }
        
        stage(&apos;Deploy1&apos;) {
            steps {
                node(&apos;tomcat1&apos;){
                    
                    sh &apos;&apos;&apos;
                        rm -rf *
                        echo $ver
                        wget http://server1:8081/nexus/content/repositories/snapshots/task6/$ver/test.war
                        curl http://server1/jkmanager?cmd=update&amp;from=list&amp;w=lb&amp;sw=server2&amp;vwa=1
                        cp test.war /var/lib/tomcat/webapps
                        sleep 5s
                        curl http://server2:8080/test/index.jsp
                        curl http://server1/jkmanager?cmd=update&amp;from=list&amp;w=lb&amp;sw=server2&amp;vwa=0
                    &apos;&apos;&apos;
                }
            }
        }
        
        stage(&apos;Deploy2&apos;) {
            steps {
                node(&apos;tomcat2&apos;){
                    sh &apos;&apos;&apos;
                        rm -rf *
                        wget http://server1:8081/nexus/content/repositories/snapshots/task6/$ver/test.war
                        curl http://server1/jkmanager?cmd=update&amp;from=list&amp;w=lb&amp;sw=server3&amp;vwa=1
                        cp test.war /var/lib/tomcat/webapps
                        sleep 5s
                        curl http://server3:8080/test/index.jsp
                        curl http://server1/jkmanager?cmd=update&amp;from=list&amp;w=lb&amp;sw=server3&amp;vwa=0
                    &apos;&apos;&apos;
                }
            }
        }
        
        stage (&apos;Git push&apos;) {
            steps {
                node(&apos;master&apos;){
                    sh &apos;&apos;&apos;
                    cd devopstraining
                    git add ./gradle.properties
                    git status
                    git commit -a -m &quot;Update version&quot;
                    git push
                    git checkout master
                    git merge task6
                    git push
                    git tag -a $ver -m &apos;version&apos;
                    git push origin $ver
                    &apos;&apos;&apos;
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>